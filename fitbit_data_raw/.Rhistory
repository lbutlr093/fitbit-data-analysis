b <- makeVector(1:100)
cachemean(a)
a <- makeVector(1:100)
b <- makeVector(1:100)
cachemean(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(1:100)
b <- makeVector(1:100)
cachemean(a)
cachemean(a)
cachemean(a)
cachemean(b)
cachemean(b)
a <- makeVector(1:10)
cachemean(a)
cachemean(a)
a
a <- matrix(1:20, nrow = 5, ncol = 4)
a
class(a)
makeCacheMatrix <- function(x = matrix()) {
x <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mean) m <<- solve      ## setmean -> setmatrix, mean -> matrix
getinverse <- function() m                     ## getmean -> getmatrix
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
test <- makeCacheMatrix(a)
test
test2 <- makeCacheMatrix(a)
cacheSolve(test)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mean) m <<- solve      ## setmean -> setmatrix, mean -> matrix
getinverse <- function() m                     ## getmean -> getmatrix
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
test <- makeCacheMatrix(a)
test2 <- makeCacheMatrix(a)
cacheSolve(test)
a <- matrix(1:4, nrow = 2, ncol = 2)
a
test <- makeCacheMatrix(a)
test2 <- makeCacheMatrix(a)
cacheSolve(test)
set.seed(1)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10,0,20)
y <- 0.5 + 2 * x + e
x
e
y
swirl()
library(swirl)
swirl()
ls()
rm(list=makeCacheMatrix())
rm(makeCacheMatrix())
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, mean = 10)
rpois(5, 10)
mypois <- replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", title "My Plot Subtitle")
plot(cars, main = "My Plot", title = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
dir()
setwd(~/Documents/code/datasciencecoursera/hospital-data)
setwd("~/Documents/code/datasciencecoursera/hospital-data")
getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcomes)
head(outcome)
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcomes[, 11])
hist(outcome[, 11])
summary(outcome_)
summary(outcome)
colnames(outcome)
head(outcome)
colnames(outcome[1,2,3,6,7,8])
outcome[,11]
colnames(outcome)
mycol <- "State"
outcome[mycol]
state <- "TX"
outcome["State" = "state"]
outcome["State" = "TX"]
outcome["TX"]
outcome[State]
outcome["State"]
outcome["State" <- "TX"]
outcome[colnames("State") <- "TX"]
outcome[colnames("State")]
states <- outcome["State"]
states
states["TX"]
sum(states("TX"))
sum(states["TX"])
best <- function(state,outcome ) {
#read in data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Create a dataframe with relevant columns
bestdf <- df[,c("State","Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia" )]
#Check that state in function exists in data
DoesStateExist<-subset(bestdf$State, bestdf$State==state)
if(length(DoesStateExist) == 0) stop("invalid state")
#Fix outcome so it's the same as what the user inputs
if(outcome == "heart attack") {outcomeanswer <-
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}else if (outcome == "pneumonia") {outcomeanswer <-
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else if (outcome == "heart failure") {outcomeanswer <-
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else (outcome == "invalid state")
#outcomeanswer
singledf <- bestdf[ which(bestdf$State== state), ]
#head(singledf)
singlemetric <- singledf[,c("Hospital.Name",outcomeanswer)]
#convert answer to be numeric
singlemetric[, 2:2] <- sapply(singlemetric[, 2:2], as.numeric)
#head(singlemetric)
answer <-singlemetric[which(singlemetric[outcomeanswer] ==
min(singlemetric[[outcomeanswer]],na.rm = TRUE)), ]
answer$Hospital.Name
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
outcomedata <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
outcomeDataSet <- outcomedata[which(outcomedata$State==state),]
is_a_state <- is.element(state,outcomedata[,"State"])
if(!(is_a_state)){
stop ("invalid state")
}else{
if (outcome=="heart attack") {
a <- outcomeDataSet[[11]]
}
else if (outcome=="heart failure") {
a <- outcomeDataSet[[17]]
}
else if (outcome=="pneumonia") {
a <- outcomeDataSet[[23]]
}
else{
stop ("invalid outcome")
}
}
b <- as.numeric(a)
if (num == "best") {m <- min(b,na.rm=TRUE)
pos <- match(m,a)}
if (num == "worst") {m <- max(b,na.rm=TRUE)
pos <-match(m,a)}
else {
pos <- match((sort(b)[num]),a)
}
hospitalName <- outcomeDataSet[[2]][pos]
hospitalName
}
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(stateChr, outcomeChr, rankObj) {
# --- Init loading outcome data
outcomeDfr <- Init("ProgAssignment2-data/outcome-of-care-measures.csv")
# --- Coerce character into numeric
suppressWarnings(outcomeDfr[, 11] <- as.numeric(outcomeDfr[, 11]))
suppressWarnings(outcomeDfr[, 17] <- as.numeric(outcomeDfr[, 17]))
suppressWarnings(outcomeDfr[, 23] <- as.numeric(outcomeDfr[, 23]))
# --- Create a data frame of freq by state Remove row.names
tableDfr <- data.frame(State = names(tapply(outcomeDfr$State, outcomeDfr$State,
length)), Freq = tapply(outcomeDfr$State, outcomeDfr$State, length))
rownames(tableDfr) <- NULL
# --- Create a data frame of possible inputs and respective columns
inputDfr <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
# --- Check that state and outcome are valid
if (nrow(tableDfr[tableDfr$State == stateChr, ]) == 0)
stop("invalid state")
if (nrow(inputDfr[inputDfr$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
# --- Return hospital name in that state with the ranked THIRTY(30)-day
# death rate Create a data frame with given ONE (1) state Determine the
# relevant column Reorder the new data frame from best to worst
stateDfr <- outcomeDfr[outcomeDfr$State == stateChr, ]
colNum <- inputDfr[inputDfr$Outcome == outcomeChr, 2]
stateDfr <- stateDfr[complete.cases(stateDfr[, colNum]), ]
stateDfr <- stateDfr[order(stateDfr[, colNum], stateDfr$Hospital.Name),
]
# --- Convert 'best' and 'worst' to numeric 'Worst' code is not valid if
# omit NA from results Determine the relevant row
if (rankObj == "best")
rankObj <- 1
if (rankObj == "worst")
rankObj <- nrow(stateDfr)
# if( rankObj=='worst' ) rankObj <- tableDfr[tableDfr$State==stateChr, 2]
suppressWarnings(rankNum <- as.numeric(rankObj))
# --- Return value is a character Return data frame for debug
return(stateDfr[rankNum, ]$Hospital.Name)
# return(stateDfr)
}
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", na.string = "Not Available",  stringsAsFactors = FALSE)
subdata <- subset(data, select=c(State, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
names(subdata) <- c("State", "Hospital.Name", "Heart.Attack",
"Heart.Failure","Pneumonia")
## Check that state and outcome are valid
state_data <- subset(subdata, State==state)
if ( nrow(state_data)==0 ) {
stop("invalid state")
}
if ( (outcome!="heart attack") & (outcome!="heart failure")
& (outcome!="pneumonia") )   {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death rate
if ( outcome=="heart attack")  {
hos_rank <- state_data[ order(state_data$Heart.Attack, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Heart.Attack) )
}
else if ( outcome=="heart failure")  {
hos_rank <- state_data[ order(state_data$Heart.Failure, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Heart.Failure) )
}
else  {
hos_rank <- state_data[ order(state_data$Pneumonia, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Pneumonia) )
}
n <- nrow(hos_rank_naomit)
hos_rank_naomit$Rank <- 1:n
if (num == "best")  {
return(hos_rank_naomit[[1,2]])
}
else if (num == "worst")  {
return( hos_rank_naomit[[n,2]] )
}
else if ( (num>=1)&(num<=n) )  {
return( hos_rank_naomit[[num,2]] )
}
else  {
return(NA)
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best") {
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", na.string = "Not Available",  stringsAsFactors = FALSE)
subdata <- subset(data, select=c(State, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
names(subdata) <- c("State", "Hospital.Name", "Heart.Attack",
"Heart.Failure","Pneumonia")
## Check that state and outcome are valid
state_data <- subset(subdata, State==state)
if ( nrow(state_data)==0 ) {
stop("invalid state")
}
if ( (outcome!="heart attack") & (outcome!="heart failure")
& (outcome!="pneumonia") )   {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death rate
if ( outcome=="heart attack")  {
hos_rank <- state_data[ order(state_data$Heart.Attack, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Heart.Attack) )
}
else if ( outcome=="heart failure")  {
hos_rank <- state_data[ order(state_data$Heart.Failure, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Heart.Failure) )
}
else  {
hos_rank <- state_data[ order(state_data$Pneumonia, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Pneumonia) )
}
n <- nrow(hos_rank_naomit)
hos_rank_naomit$Rank <- 1:n
if (num == "best")  {
return(hos_rank_naomit[[1,2]])
}
else if (num == "worst")  {
return( hos_rank_naomit[[n,2]] )
}
else if ( (num>=1)&(num<=n) )  {
return( hos_rank_naomit[[num,2]] )
}
else  {
return(NA)
}
}
allstates <- c("AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","GU","HI",
"IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO",
"MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR",
"PA","PR","RI","SC","SD","TN","TX","UT","VA","VI","VT","WA","WI",
"WV","WY")
hospitals <- vector()
for (i in 1:54)  {
hospitals[i] <- rankhospital(allstates[i], outcome=outcome, num=num)
}
results <- data.frame(hospitals,allstates)
names(results) <- c("hospital","state")
rownames(results) <- allstates
return(results)
}
rankall("heart attack", 4)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
setwd("~/Documents/code/fitbit-data-analysis/fitbit-data")
ls
ls()
dir()
csvVector <- list.files(pattern="*.csv")
csvVector
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
URL <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(URL, destfile = "~/Documents/code/datasciencecoursera/quiz-data")
download.file(URL, destfile = "/home/logan/Documents/code/datasciencecoursera/quiz-data")
download.file(URL, destfile = "/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1.csv")
my data <- read.csv("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1.csv")
mydata <- read.csv("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1.csv")
head(mydata)
summmarize(mydata)
summmary(mydata)
mydata.summary()
mydata[1:20, 7]
mydata[1, 7]
mydata[29, 7]
mydata[89, 7]
mydata[89, "val"]
grep("val", names(mydata))
grep("val", names(mydata), value = TRUE)
grep("val", colnames(mydata))
grep("^val$", colnames(mydata))
colnames(mydata)
mydata[1, 37]
mydata[22, 37]
mydata[23, 37]
mydata[24, 37]
mydata[10:20, 37]
mydata[20:30, 37]
mydata[31:40, 37]
mydata[40:100, 37]
sum(mydata[, 37] == 24)
myDataVector <- mydata[, 37]
head(myDataVector)
sum(myDataVector == 24)
count(myDataVector == 24)
sum(myDataVector == "24")
sum(myDataVector>=24)
sum(myDataVector="24")
summary(myDataVector)
sum(!is.na(myDataVector=="24"))
4420 / 24
length(myDataVector)
myDataVecto[100:500]
myDataVector[100:500]
sum(!is.na(myDataVector>=24))
sum(!is.na(myDataVector==24))
sum(!is.na(myDataVector))
sum(!is.na(myDataVector[]>=24))
sum(!is.na(myDataVector[,]>=24))
table(mydata)
table(myDataVector)
colnames(mydata)
mydata[1:50,41]
URL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(URL2, destfile = "/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-3.xlsx")
mydata2 <- read.csv("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-3.csv")
mydata2 <- read.xlsx("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-3.xlsx")
mydata2 <- read.xls("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-3.xlsx")
library(XLConnect)
install.packages("readx1")
library(xlsx)
library(xls)
install.packages("xlsx", dependencies = TRUE)
mydata2 <- read.xlsx("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-3.xlsx")
library(xlsx)
library(xls)
install.packages("xlsx")
library(xlsx)
apt-get install r-cran-rjava
library(rjava)
library("rJava")
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
library(rJava)
library(xlsx)
