cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(range,flag_shapes)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
apply(unique_vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, sapply)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
iris
tapply(iris$Sepal.Length, iris$Species, mean)
round(tapply(iris$Sepal.Length, iris$Species, mean), 1)
round(tapply(iris$Sepal.Length, iris$Species, mean), 0)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
abs(tapply(mtcars$hp, mtcars$cyl, mean))
209.21429 - 82.63636
round(126.5779, 0)
debug(ls)
ls
ls
;
tapply(mtcars$hp, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
data(mtcars)
library(xlsx)
mydata2 <- read.xlsx("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-3.xlsx")
mydata2 <- read.xlsx("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-3.xlsx", sheet = 1)
mydata2 <- read.xlsx("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-3.xlsx", 1)
head(mydata2)
newdata2 <- mydata2[18:23,7:15]
newdata2
dat <- newdata2
sum(dat$Zip*dat$Ext,na.rm=TRUE)
download.file(URL3, destfile = "/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-4.xml")
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
URL3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(URL3, destfile = "/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-4.xml")
mydata2 <- read.xml("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-3.xlsx")
data <- xmlParse(mydata2)
require(XML)
library(XML)
install.packages("XML")
library(XML)
library(XML)
library('XML')
library("XML")
library("XML")
install.packages("XML")
library("XML")
data <- xmlParse(mydata2)
data <- xmlParse(URL3)
require(XML)
data <- xmlParse(URL3)
data <- xmlParse(mydata2)
mydata2
summary(mydata2)
colnames(mydata2)
mydata2 <- read.xml("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-4.xml")
mydata2 <- xmlParse("/home/logan/Documents/code/datasciencecoursera/quiz-data/quiz1-4.xml")
head(mydata2)
summary(mydata2)
xmlElementsByTagName(xmlRoot(mydata2)[[1]], "variable")
xmlElementsByTagName(xmlRoot(mydata2)[[1]])
xmlElementsByTagName(xmlRoot(mydata2))
xmlElementsByTagName(xmlRoot(mydata2), "variable")
library(XML)
doc <- xmlTreeParse(file=URL3,useInternal=TRUE)
URL3
doc <- xmlTreeParse(file=URL3)
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
doc <- xmlTreeParse(file=fileUrl2,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]][[1]]
zipcode <- xpathSApply(rootNode, "//zipcode",xmlValue)
length(zipcode[zipcode==21231])
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url=fileUrl1, destfile="fsspid.csv", mode="w", method="curl")
dateDownloaded <- date()
print(dateDownloaded)
library(date.table)
library(data.table)
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
install.packages(data.table)
install.packages()
install.packages("data.table")
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
length(zipcode[zipcode==21231])
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15);mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15);mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
mydata <- read.csv("/home/logan/Documents/code/custom_report_2016-10-26.csv")
head(mydata)
swirl()
library(swirl)
swirl()
data(cars)
?cars
head(cars)
0
exit()
quit()
head(mydata)
plot(mydata)
quit
plot(cars)
plot
?plot
bye()
plot(mydata)
mydata
mydata2 <- mydata
xlim(c(39000,44000))
library(xlim)
install.packages(xlim)
?plot
smoothScatter(mydata)
mydata <- read.csv("/home/logan/Documents/code/custom_report_2016-10-26.csv-new")
mydata <- read.csv("/home/logan/Documents/code/custom_report_2016-10-26-new.csv")
plot(mydata)
plot(Date ~ Answer, mydata)
plot(mydata)
install.packages("RMySQL")
install.packages("RMySQL", dependencies = TRUE)
install.packages("RMySQL")
install.packages("RMySQL", dependencies = TRUE)
version
full_2016 <- read.csv("fitbit_data_processed/activities_2016_01.csv")
full_2017 <- read.csv("fitbit_data_processed/activities_2017_01.csv")
setwd("~/Documents/code/fitbit-data-analysis/")
full_2016 <- read.csv("fitbit_data_processed/activities_2016_01.csv")
full_2017 <- read.csv("fitbit_data_processed/activities_2017_01.csv")
getwd()
full_2016
workout_2016 <- read.csv("other_data/jan_2016.csv")
workout_2017 <- read.csv("other_data/jan_2017.csv")
merged_2016 <- merge(full_2016, workout_2016, by.x = "Date", incomparables = NA, all = TRUE)
merged_2017 <- merge(full_2017, workout_2017, by.x = "Date", incomparables = NA, all = TRUE)
merged_2016$Workout.Steps[is.na(merged_2016$Workout.Steps)] <- 0
merged_2017$Workout.Steps[is.na(merged_2017$Workout.Steps)] <- 0
merged_2016
merged_2017$Adjusted.Steps <- merged_2017$Steps - merged_2017$Workout.Steps
as.numeric(sub(",", ".", merged_2016$Steps, fixed = TRUE))
merged_2016
class(merged_2016$Steps)
as.numeric(sub(",", "", merged_2016$Steps, fixed = TRUE))
class(merged_2016$Steps
)
merged_2016$Steps <- as.numeric(sub(",", "", merged_2016$Steps, fixed = TRUE))
merged_2016
class(merged_2016$Steps)
class(merged_2016$Date)
class(merged_2016$Steps)
class(merged_2016$Workout.Steps)
a <- 4
b <- 3
class(a, b)
class(a)
class(b)
a - b
c <- a - b
class(c)
c
merged_2017$Adjusted.Steps <- merged_2017$Steps - merged_2017$Workout.Steps
setwd("~/Documents/code/fitbit-data-analysis/")
full_2016 <- read.csv("fitbit_data_processed/activities_2016_01.csv")
full_2017 <- read.csv("fitbit_data_processed/activities_2017_01.csv")
workout_2016 <- read.csv("other_data/jan_2016.csv")
workout_2017 <- read.csv("other_data/jan_2017.csv")
merged_2016 <- merge(full_2016, workout_2016, by.x = "Date", incomparables = NA, all = TRUE)
merged_2017 <- merge(full_2017, workout_2017, by.x = "Date", incomparables = NA, all = TRUE)
merged_2016$Workout.Steps[is.na(merged_2016$Workout.Steps)] <- 0 # Force NA values to 0 - easier for operations in this case
merged_2017$Workout.Steps[is.na(merged_2017$Workout.Steps)] <- 0
merged_2016$Steps <- as.numeric(sub(",", "", merged_2016$Steps, fixed = TRUE)) # Allow Steps to be converted to numeric for operations
merged_2017$Steps <- as.numeric(sub(",", "", merged_2017$Steps, fixed = TRUE))
merged_2017$Adjusted.Steps <- merged_2017$Steps - merged_2017$Workout.Steps
merged_2017
merged_2016$Adjusted.Steps <- merged_2016$Steps - merged_2016$Workout.Steps
merged_2017$Adjusted.Steps <- merged_2017$Steps - merged_2017$Workout.Steps
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(years(Date), levels = year.name))) +
geom_violin(data = merged_2016[which(merged_2016$Adjusted.Steps>0),], scale = "area")
library(ggplot2)
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(years(Date), levels = year.name))) +
geom_violin(data = merged_2016[which(merged_2016$Adjusted.Steps>0),], scale = "area")
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(years(Date), levels = year.name)),
data = merged_2016) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date)), levels = year.name)),
data = merged_2016) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date)), levels = year.name)),
data = merged_2016) +
geom_violin(scale = "area")
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date), levels = year.name)),
data = merged_2016)
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date), levels = year.name)),
data = merged_2016) +
geom_violin(scale = "area")
jan_analysis_violin_plot
class(merged_2016$Date)
library(lubridate)
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date), levels = year.name)),
data = merged_2016) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = merged_2016) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = merged_2016[which(merged_2016$Adjusted.Steps>0),]) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date)))) +
geom_violin(scale = "area", data = merged_2016[which(merged_2016$Adjusted.Steps>0),])
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date)))) +
geom_violin(scale = "area", data = merged_2016)
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date)))) +
geom_violin(scale = "area", data = merged_2016$Adjusted.Steps)
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = merged_2016[which(merged_2016$Adjusted.Steps),]) +
geom_violin(scale = "area")
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = merged_2016[which(merged_2016$Adjusted.Steps>0),]) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = merged_2017[which(merged_2017$Adjusted.Steps>0),]) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_df <- rbind(merged_2016, merged_2017)
jan_df
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date)), levels = year.name),
data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date), levels = year.name)),
data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "width")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "width") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps")
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))),
data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5))
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))), data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5)) +
theme(axis.text.x = element_text(face="bold", color="#993333", size=12, angle=60, hjust=1),
axis.text.y = element_text(face="bold", color="#993333", size=12)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))), data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5)) +
theme(axis.text.x = element_text(face="bold", color="#993333", size=12, hjust=1),
axis.text.y = element_text(face="bold", color="#993333", size=12)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))), data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5)) +
theme(axis.text.x = element_text(face="bold", color="#993333", size=12),
axis.text.y = element_text(face="bold", color="#993333", size=12)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))), data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5)) +
theme(axis.text.x = element_text(face="bold", color="#FFFFFF", size=12),
axis.text.y = element_text(face="bold", color="#FFFFFF", size=12)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))), data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5)) +
theme(axis.text.x = element_text(face="bold", color="#000000", size=12),
axis.text.y = element_text(face="bold", color="#000000", size=12)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))), data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5)) +
theme(axis.text.x = element_text(face="bold", color="#000000", size=12),
axis.text.y = element_text(face="bold", color="#000000", size=12)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#FF9900", face="bold", size=14))
jan_analysis_violin_plot
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))), data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5)) +
theme(axis.text.x = element_text(face="bold", color="#000000", size=12),
axis.text.y = element_text(face="bold", color="#000000", size=12)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
jan_analysis_violin_plot
jan_steps <- function() {
## This function will take a comparison of the average steps walked in the month of January
## between 2016 and 2017. The purpose for running this project is my suspicion that I am
## much more active at my current client this year than I was at a different client
## last year. I will take the total steps each day and subtract the number of steps that
## are tracked in exercise to normalize the data to the "workday" steps.
library(ggplot2)
library(lubridate)
setwd("~/Documents/code/fitbit-data-analysis/")
full_2016 <- read.csv("fitbit_data_processed/activities_2016_01.csv")
full_2017 <- read.csv("fitbit_data_processed/activities_2017_01.csv")
workout_2016 <- read.csv("other_data/jan_2016.csv")
workout_2017 <- read.csv("other_data/jan_2017.csv")
merged_2016 <- merge(full_2016, workout_2016, by.x = "Date", incomparables = NA, all = TRUE)
merged_2017 <- merge(full_2017, workout_2017, by.x = "Date", incomparables = NA, all = TRUE)
merged_2016$Workout.Steps[is.na(merged_2016$Workout.Steps)] <- 0 # Force NA values to 0 - easier for operations in this case
merged_2017$Workout.Steps[is.na(merged_2017$Workout.Steps)] <- 0
merged_2016$Steps <- as.numeric(sub(",", "", merged_2016$Steps, fixed = TRUE)) # Allow Steps to be converted to numeric for operations
merged_2017$Steps <- as.numeric(sub(",", "", merged_2017$Steps, fixed = TRUE))
merged_2016$Adjusted.Steps <- merged_2016$Steps - merged_2016$Workout.Steps # Adjusted steps = (Total steps - Workout steps)
merged_2017$Adjusted.Steps <- merged_2017$Steps - merged_2017$Workout.Steps
jan_df <- rbind(merged_2016, merged_2017)
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))), data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5)) +
theme(axis.text.x = element_text(face="bold", color="#000000", size=12),
axis.text.y = element_text(face="bold", color="#000000", size=12)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
ggsave(filename = "/data_visualization/january_analysis.png", plot = jan_analysis_violin_plot)
}
jan_steps()
jan_steps <- function() {
## This function will take a comparison of the average steps walked in the month of January
## between 2016 and 2017. The purpose for running this project is my suspicion that I am
## much more active at my current client this year than I was at a different client
## last year. I will take the total steps each day and subtract the number of steps that
## are tracked in exercise to normalize the data to the "workday" steps.
library(ggplot2)
library(lubridate)
setwd("~/Documents/code/fitbit-data-analysis/")
full_2016 <- read.csv("fitbit_data_processed/activities_2016_01.csv")
full_2017 <- read.csv("fitbit_data_processed/activities_2017_01.csv")
workout_2016 <- read.csv("other_data/jan_2016.csv")
workout_2017 <- read.csv("other_data/jan_2017.csv")
merged_2016 <- merge(full_2016, workout_2016, by.x = "Date", incomparables = NA, all = TRUE)
merged_2017 <- merge(full_2017, workout_2017, by.x = "Date", incomparables = NA, all = TRUE)
merged_2016$Workout.Steps[is.na(merged_2016$Workout.Steps)] <- 0 # Force NA values to 0 - easier for operations in this case
merged_2017$Workout.Steps[is.na(merged_2017$Workout.Steps)] <- 0
merged_2016$Steps <- as.numeric(sub(",", "", merged_2016$Steps, fixed = TRUE)) # Allow Steps to be converted to numeric for operations
merged_2017$Steps <- as.numeric(sub(",", "", merged_2017$Steps, fixed = TRUE))
merged_2016$Adjusted.Steps <- merged_2016$Steps - merged_2016$Workout.Steps # Adjusted steps = (Total steps - Workout steps)
merged_2017$Adjusted.Steps <- merged_2017$Steps - merged_2017$Workout.Steps
jan_df <- rbind(merged_2016, merged_2017)
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))), data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5)) +
theme(axis.text.x = element_text(face="bold", color="#000000", size=12),
axis.text.y = element_text(face="bold", color="#000000", size=12)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
getwd()
#ggsave(filename = "/data_visualization/january_analysis.png", plot = jan_analysis_violin_plot)
}
jan_steps()
jan_steps <- function() {
## This function will take a comparison of the average steps walked in the month of January
## between 2016 and 2017. The purpose for running this project is my suspicion that I am
## much more active at my current client this year than I was at a different client
## last year. I will take the total steps each day and subtract the number of steps that
## are tracked in exercise to normalize the data to the "workday" steps.
library(ggplot2)
library(lubridate)
setwd("~/Documents/code/fitbit-data-analysis/")
full_2016 <- read.csv("fitbit_data_processed/activities_2016_01.csv")
full_2017 <- read.csv("fitbit_data_processed/activities_2017_01.csv")
workout_2016 <- read.csv("other_data/jan_2016.csv")
workout_2017 <- read.csv("other_data/jan_2017.csv")
merged_2016 <- merge(full_2016, workout_2016, by.x = "Date", incomparables = NA, all = TRUE)
merged_2017 <- merge(full_2017, workout_2017, by.x = "Date", incomparables = NA, all = TRUE)
merged_2016$Workout.Steps[is.na(merged_2016$Workout.Steps)] <- 0 # Force NA values to 0 - easier for operations in this case
merged_2017$Workout.Steps[is.na(merged_2017$Workout.Steps)] <- 0
merged_2016$Steps <- as.numeric(sub(",", "", merged_2016$Steps, fixed = TRUE)) # Allow Steps to be converted to numeric for operations
merged_2017$Steps <- as.numeric(sub(",", "", merged_2017$Steps, fixed = TRUE))
merged_2016$Adjusted.Steps <- merged_2016$Steps - merged_2016$Workout.Steps # Adjusted steps = (Total steps - Workout steps)
merged_2017$Adjusted.Steps <- merged_2017$Steps - merged_2017$Workout.Steps
jan_df <- rbind(merged_2016, merged_2017)
jan_analysis_violin_plot <- ggplot(aes(y = Adjusted.Steps, x = factor(year(Date))), data = jan_df[which(jan_df$Adjusted.Steps>0),]) +
geom_violin(scale = "area") +
ggtitle("January Step Analysis") +
labs(x = "Year", y = "Steps") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=16, hjust=0.5)) +
theme(axis.text.x = element_text(face="bold", color="#000000", size=12),
axis.text.y = element_text(face="bold", color="#000000", size=12)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
getwd()
ggsave(filename = "data_visualization/january_analysis.png", plot = jan_analysis_violin_plot)
}
jan_steps()
